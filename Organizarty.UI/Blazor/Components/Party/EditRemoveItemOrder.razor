@using Organizarty.Application.App.Party.Enums;
@using Organizarty.Application.App.Party.UseCases;
@inject RemoveFromPartyUseCase RemoveFromParty
@inject NavigationManager NavigationManager

<div class="flex gap-x-8">
<a href="/Clients/Party/Edit/@TypePath()/@ItemId" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">
    <img src="/images/Manager/Decorations/Edit.svg" class="h-8">
</a>
<button @onclick="RemoveItem" disable="@IsLoading" class="font-medium text-red-600 dark:text-red-500 hover:underline ">    
    <img class="h-8" src="/images/Manager/Decorations/Delete.svg">
</button>
</div>

@code{
  [Parameter]
  public Guid ItemId {get; set;}
  [Parameter]
  public ItemType Type {get; set;}

  public bool IsLoading = false;

  public string TypePath(){
    switch (Type)
    {
        case ItemType.Decoration:
            return "Decorations";
        case ItemType.Food:
            return "Products";
        case ItemType.Service:
            return "Services";
    }

    return "Services";
  }

  public async Task RemoveItem(){
    IsLoading = true;
    StateHasChanged();
    switch (Type)
    {
        case ItemType.Decoration:
            await RemoveFromParty.RemoveDecoration(ItemId);
            break;
        case ItemType.Food:
            await RemoveFromParty.RemoveFood(ItemId);
            break;
        case ItemType.Service:
            await RemoveFromParty.RemoveService(ItemId);
            break;
    }

     NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
  }
}
