@page "/account/users/register"

@using Organizarty.Application.App.Users.UseCases;
@using Organizarty.Application.App.Users.Entities;
@using Organizarty.Application.Exceptions;

@inject RegisterUserUseCase RegisterUser
@inject ILogger<Register> Logger;

<PageTitle>Register</PageTitle>

<EditForm Model="@User" OnValidSubmit="Submit" class="w-full max-w-md mx-auto">
    @if(Errors is not null){
      @foreach (var error in Errors.ErrorList)
      {
        <div class="bg-red-100 text-red-600 p-2 my-2 rounded-md">@error</div>
      }
    }

    <div class="mb-4">
        <label for="Quantity" class="block text-gray-700 text-sm font-bold mb-2">Nome</label>
        <input id="Quantity" @bind="User.UserName" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
        <input type="email" id="Note" @bind="User.Email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Senha</label>
        <input type="password" id="Note" @bind="User.Password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Location</label>
        <input id="Note" @bind="User.Location" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <a href="/account/users/login">Ja tenho uma conta</a>

    <div class="mb-6 text-center">
        <button disabled="@submitting" @onclick="Submit" type="button" class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700">Create</button>
    </div>
</EditForm>


@if(RegisterdUser is not null){
  <p>@RegisterdUser.Id</p>
  <p>Hello, @RegisterdUser.UserName</p>
  <p>Hello, @RegisterdUser.Email</p>
}

@code{
  private User User = new User();
  private User? RegisterdUser;

  private bool submitting = false;
  private ValidationFailException? Errors;

  private async Task Submit(){
      if(submitting){ throw new Exception("requisição existente"); }

      var data = new RegisterUserDto(User.UserName, User.Location, User.Email, User.Password);

      try{
        submitting = true;
        await Task.Run(async () =>{
          RegisterdUser = await RegisterUser.Execute(data);
        });
        Errors = null;
      } catch(ValidationFailException e){
        Errors = e;
      } finally{
        submitting = false;
      }
  }
}
