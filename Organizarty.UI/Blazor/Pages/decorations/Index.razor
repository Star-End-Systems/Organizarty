@page "/decorations"

@using Organizarty.Application.App.DecorationTypes.UseCases;
@using Organizarty.Application.App.DecorationTypes.Entities;
@using Organizarty.Application.Exceptions;

@inject CreateDecorationTypeUseCase CreateDecoration
@inject SelectDecorationTypeUseCase SelectDecoration

<PageTitle>Decorations</PageTitle>

<h1>Create Decoration</h1>

<EditForm Model="@Decoration" OnValidSubmit="Submit" class="w-full max-w-md mx-auto">
    @if(Errors is not null){
      @foreach (var error in Errors.ErrorList)
      {
        <div class="bg-red-100 text-red-600 p-2 my-2 rounded-md">@error</div>
      }
    }

    <div class="mb-4">
        <label for="Quantity" class="block text-gray-700 text-sm font-bold mb-2">Nome</label>
        <input id="Quantity" @bind="Decoration.Name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Descrição</label>
        <input id="Note" @bind="Decoration.Description" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Tamanho</label>
        <input id="Note" @bind="Decoration.Size" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">Modelo</label>
        <input id="Note" @bind="Decoration.Model" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label for="Note" class="block text-gray-700 text-sm font-bold mb-2">URl do Objeto</label>
        <input id="Note" @bind="Decoration.ObjectURL" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-6 text-center">
        <button disabled="@submitting" @onclick="Submit" type="button" class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700">Create</button>
    </div>
</EditForm>

<h1>List of decorations</h1>

@if(Decorations.Count != 0){
  <ol class="relative border-l border-gray-200 dark:border-gray-700">                  
      @foreach (var decoration in Decorations)
      {
        <li class="ml-6">
            <span class="absolute flex items-center justify-center w-6 h-6 bg-blue-100 rounded-full -left-3 ring-8 ring-white dark:ring-gray-900 dark:bg-blue-900">
                <svg class="w-2.5 h-2.5 text-blue-800 dark:text-blue-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                </svg>
            </span>
            <h3 class="mb-1 text-lg font-semibold text-gray-900">@decoration.Name</h3>
            <p class="block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">@decoration.Description</p>
            <p class="text-base font-normal text-gray-500 dark:text-gray-400">@decoration.Size</p>
        </li>
      }
  </ol>
} else{
  <p>No decorations</p>
}

@code{
  private List<DecorationType> Decorations = new List<DecorationType>();
  private DecorationType Decoration = new DecorationType();

  private bool submitting = false;
  private ValidationFailException? Errors;

  protected override async Task OnInitializedAsync()
    => await Task.Run(() => UpdateDecorations());

    private async Task Submit(){
        if(submitting){ throw new Exception("requisição existente"); }

        var data = new CreateDecorationTypeDto(Decoration.Name, Decoration.Description, Decoration.Size, Decoration.Model, Decoration.ObjectURL, Guid.NewGuid());

        try{
          submitting = true;
          await Task.Run(() => CreateDecoration.Execute(data));
          Errors = null;
          await Task.Run(async () => await UpdateDecorations());
        } catch(ValidationFailException e){
          Errors = e;
        } finally{
          submitting = false;
        }
    }

 private async Task UpdateDecorations(){
    await Task.Run(async () => {
    Decorations = await SelectDecoration.All();
    });
  }
}
