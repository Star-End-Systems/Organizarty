@using Organizarty.Application.App.Decorations.Entities;
@using Organizarty.Adapters;
@using Organizarty.Application.App.DecorationTypes.UseCases;
@using Organizarty.UI.Attributes;
@using Organizarty.Application.Exceptions;
@using Organizarty.UI.Blazor.Components.Utils.FlashCards;

@inject IImageUpload UploadImage
@inject CreateDecorationTypeUseCase CreateDecoration
@inject NavigationManager NavigationManager

<section class="flex h-screen">
  <div class="part1 w-full h-screen py-8 flex-col">
    <div class="LoginForm flex justify-center py-8 text-center">
      <EditForm OnSubmit="@Submit" Model="@Input" id="login" class="w-full">
        <div class="absolute flex flex-col right-0 top-0 z-20 p-4 gap-y-4">
            @foreach(var err in Errors){
            <div @onclick="async () => await RemoveError(err)">
                <FlashCard Type="error" Body="@err" /> 
            </div>
            }
        </div>
        <h2 class="font-[Konnect] text-3xl">Nova Decoração</h2>
        @* <div class="line pb-8 flex justify-center rounded-full"></div> *@
      <div class="w-full flex">
      <div class="w-1/2 flex justify-center">
        <div class="flex justify-end w-2/5 h-1/2 self-center pr-10 my-8">
          <label class="w-4/5 h-4/5 cursor-pointer">
            @if(ImageLoading){
              <div role="status" class="flex items-center justify-center h-56 max-w-sm bg-gray-300 rounded-lg animate-pulse dark:bg-gray-700">
                <svg class="w-10 h-10 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                  <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z"/>
                  <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM9 13a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2Zm4 .382a1 1 0 0 1-1.447.894L10 13v-2l1.553-1.276a1 1 0 0 1 1.447.894v2.764Z"/>
                </svg>
                <span class="sr-only">Loading...</span>
              </div>
          } else {
            <img class="w-5/6 h-full border-2 border-solid border-[#bb00c7] rounded-2xl shadow-2xl bg-white px-10 py-5" src="@Input.ImageUrl"/>
          }

          <InputFile class="hidden" OnChange="@OnInputFileChange" />
        </label>
      </div>
      </div>
    
      <div class="w-1/2">
        <div asp-validation-summary="ModelOnly" class=""></div>
        <div class="h-full flex flex-col items-center justify-evenly">
          <!-- Name -->
          <input @bind="@Input.Name" class="w-9/12 h-14 rounded-xl shadow-xl placeholder form-control"
            aria-required="true" placeholder="Nome do Item" />
          <span asp-validation-for="Input.Name" class="placeholder"></span>


          <h3 class="mb-5 text-lg font-medium text-gray-900 dark:text-white">Descrição</h3>
          <input @bind="@Input.Description" class="w-9/12 h-14 rounded-xl shadow-xl placeholder form-control"
            aria-required="true" placeholder="Descrição" />
          <span asp-validation-for="Input.Description" class="placeholder"></span>


          <h3 class="mb-5 text-lg font-medium text-gray-900 dark:text-white">Tamanho</h3>
          <!-- Size -->
          <input @bind="@Input.Size" class="w-9/12 h-14 rounded-xl shadow-xl placeholder form-control"
            aria-required="true" placeholder="Tamanho" />
          <span asp-validation-for="Input.Size" class="placeholder"></span>


          <h3 class="mb-5 text-lg font-medium text-gray-900 dark:text-white">Tags</h3>
          <input @bind="@Input.TagsStr" class="w-9/12 h-14 rounded-xl shadow-xl placeholder form-control"
            aria-required="true" placeholder="Tags" />
          <span asp-validation-for="Input.TagsStr" class="placeholder"></span>
        </div>
        <div class="flex w-full place-content-evenly py-14">
          <button id="login-submit" type="submit" class="logar w-48 h-14 rounded-xl hover:shadow-2xl">Criar</button>
        </div>
        </div>
      </EditForm>
      </div>
      </div>
    </div>
</section>


@code{
    public InputModel Input { get; set; } = new();

    public List<string> Errors {get; set;} = new();

    public bool ImageLoading {get; set;} = false;

    public class InputModel
    {
        public string Name { get; set; } = default!;

        public string Description { get; set; } = default!;

        public DecorationCategory Category { get; set; } = default!;

        public string Size { get; set; } = default!;

        public string Model { get; set; } = default!;
        public string ImageUrl { get; set; } = default!;

        public string TagsStr { get; set; } = "";
    }

    public async Task Submit(){
        var tags = Input.TagsStr.Split(",").ToList();
        var data = new CreateDecorationTypeDto(Input.Name, Input.Description, Input.Category, Input.Size, "default", Input.ImageUrl, tags);

        try
        {
            await CreateDecoration.Execute(data);
        }
        catch (ValidationFailException e)
        {
            Errors.AddRange(e.Errors.Select(x => x.message));
        }
    }

    public async Task RemoveError(string err){
        await Task.Delay(3000);
        Errors.Remove(err);
    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if(file is null) return;
        ImageLoading = true;
        StateHasChanged();

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var byteArray = memoryStream.ToArray();
        try{
            Input.ImageUrl = await UploadImage.UploadImage("avatars", "assets", byteArray);
            NavigationManager.NavigateTo("/Manager/Decorations", forceLoad: false);
        } catch(Exception ex){
            Errors.Add(ex.Message);
        } finally{
            await Task.Delay(1500);
            ImageLoading = false;
            StateHasChanged();
        }
    }
}