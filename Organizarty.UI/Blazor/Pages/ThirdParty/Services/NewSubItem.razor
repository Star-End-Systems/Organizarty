@using System.ComponentModel.DataAnnotations;
@using Organizarty.Adapters;
@using Organizarty.Application.App.Services.UseCases;

@inject IImageUpload UploadImage
@inject NavigationManager NavigationManager
@inject CreateServiceInfoUseCase CreateService

<section id="Index" class="flex h-screen bg-[#BB00C7]">
  <div class="part1 w-full h-screen py-8 flex-col flex items-start">
  <a href="/ThirdParty/Services/"><img src="/images/ThirdParty/NewProducts/Setinha.png" class="ml-12 w-12"></a>
    <div class="flex flex-col items-center w-full h-full">
      <div class="LoginForm flex justify-center py-8 text-center w-5/12 h-full rounded-2xl formulario drop-shadow-2xl z-20">
        <EditForm Model="@Input" OnSubmit="@Submit" id="login" method="post" class="w-full">
          <h2 class="text-white font-bold font-[Inter] text-4xl uppercase">Novo serviço</h2>
          @* <div class="line pb-8 flex justify-center rounded-full"></div> *@
          <div class="h-full flex flex-col items-center justify-evenly font-[Inter]">
              <div class="flex items-center gap-x-2">
                  <img src="/images/ThirdParty/NewServices/camera.svg" class="w-8">
                  <p class="uppercase text-white font-[Inter]">Fotógrafo</p>
              </div>
              
            <!-- Plan -->
            <InputText @bind-Value="@Input.Plan" class="font-[Inter] w-2/3 h-14 rounded-xl shadow-xl placeholder form-control"
              aria-required="true" placeholder="Nome do plano" />
            <span asp-validation-for="@Input.Plan" class="placeholder"></span>

            <!-- Price -->
            <InputNumber @bind-Value="@Input.Price" class="font-[Inter] w-2/3 h-14 rounded-xl shadow-xl placeholder form-control"
              aria-required="true" placeholder="Preço"/>
            <span asp-validation-for="@Input.Price" class="placeholder"></span>

            <div style="width: 320px; height: 320px">
              <img src="@Input.ImgURL" alt="salve seres humanos" />
            </div>

            <!-- Image -->
            <InputText @bind-Value="@Input.ImgURL" class="font-[Inter] w-2/3 h-14 rounded-xl shadow-xl placeholder form-control"
              aria-required="true" placeholder="Cole o link da sua imagem aqui" />
            <span asp-validation-for="@Input.ImgURL" class="placeholder"></span>

            <InputFile OnChange="@OnInputFileChange" />

            <!-- Availability -->
            <div class="flex items-center me-4 gap-x-4 self-end mr-24">
              <p class="text-white font-[Inter] font-bold">Está disponível?</p>
                <input type="checkbox" @bind="@Input.IsAvaible" class="w-4 h-4 text-[#7D3098] bg-transparent border-[#7D3098] rounded focus:ring-[#7D3098] dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 placeholder form-control"
                  aria-required="true" placeholder="Status do produto" />
                <span asp-validation-for="@Input.IsAvaible" class="placeholder"></span>
            </div>

            <div class="w-full flex justify-end">
              <button id="login-submit" disable="@ImgLoading" class="mr-16 mb-8 logar bg-[#7D3098] hover:bg-[white] hover:text-[#7D3098] text-white font-bold font-[Inter] w-48 h-14 rounded-xl hover:shadow-2xl">Criar</button>
            </div>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</section>

@code{
    [Parameter]
    public Guid ServiceId {get; set;}

    public InputModel Input { get; set; } = new();

    public class InputModel
    {
        public decimal Price { get; set; } = default!;

        public bool IsAvaible { get; set; } = default!;

        public string Plan { get; set; } = default!;

        public string ImgURL { get; set; } = default!;

    }

    public bool ImgLoading;


    public async Task Submit(){
        try{
            await CreateService.Execute(new(Input.Price, Input.IsAvaible, Input.Plan, new() { Input.ImgURL }, ServiceId));
           NavigationManager.NavigateTo("/ThirdParty/Services/MyServices", forceLoad: true);
        } catch(Exception e){
          Console.WriteLine(e);
        }
    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
      Console.WriteLine("AHNNNN");
       var file = e.File;
       if (file is null)
       {
           return;
       }

       using var memoryStream = new MemoryStream();
       await file.OpenReadStream().CopyToAsync(memoryStream);
       var byteArray = memoryStream.ToArray();
       try{
          ImgLoading = true;
          Input.ImgURL = await UploadImage.UploadImage("avatars", "assets", byteArray);
       } catch(Exception ex){
       } finally{
         ImgLoading = false;
       }
   }
}
